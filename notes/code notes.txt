What's the relationship between state and controller objects?
-------------------------------------------------------------
- e.g between the PlayerState and Player objects.
- Player cannot hold a PlayerState, as the PlayerStates are held
  by the TeamState.
  - The TeamState does not hold the Players - just the state.
  - This is because we only want to pass the public state to the
    AIs. So we have "state" objects that hold the things they get to see.
- Unless:
  - Player holds PlayerState
    - Or Player itself holds the dynamic-state etc.
    - ie, no PlayerState object as such.
- ANSWER: There is state at each level
  - But it is just the state for that level
  - So Player has PlayerState
  - Team has a collection of Players
    - And also has TeamState
    - TeamState is just the team-related info (ie, not the player info)
  - Similarly for Game and GameState

What gets passed to the AIs?
----------------------------
- Position (etc) of all players
  - All player-state, except intentions for the opponent.
- Game stats



What do we hold internally? ie the game state
---------------------------------------------
- Pitch size is 105m x 68m
  - Coordinates are doubles from (0.0, 0.0) to (105.0, 68.0)
  - Starting from top-left of the pitch

- Players have a direction they are facing (in degrees)
  - 0 is pointing upwards
  - 90 is pointing right

- PlayerInfo
  - Public dynamic info (change as the game is played)
    - Position
    - Direction
    - HasBall
  - Private dynamic info (includes the "intention" of the player)
    - Energy
    - Destination
    - Speed (percentage of max speed)
    - Action (tackle, hard tackle, foul, dive etc)
  - Static info (though these can change - just less often)
    - BallControl
    - PassingAccuracy
    - MaximumEnergy
    - Agility (turning ability)
    - CurlAbility
    - TacklingAbility
    - MaxSpeed
    - MaxKickingForce

  




Client API
----------


Parts of the state (in the DTO)
-------------------------------
- What should we call the various parts of the state?
  - One problem is that lots of names are reserved works
  - Such as "static", "dynamic", "public"

- Also: Where should the player number and player type live?
  - At the moment they are in the static state.
  - But should they be passed to all players?


Interactions with AIs
---------------------
- Get team name and colors.
  - Send: n/a
  - Response: name and colors

- Get distribution of abilities between players.
  - Send: Total ability available in each category.
  - Response: abilities per player

- Start of one half.
  - Send: First or second half; direction for each team.
  - Response: Initial position for each player.
    - May be called again, e.g. after a goal has been scored.
    - No need for players to move to these positions - they just get put there.

- End of game
  - Send: final score
  - Response: n/a

- In-play update
  - Send: Game state (score, time remaining); ball position & owner; player positions and directions.
  - Response: List of intentions per player (may be empty)


How do game events work? (async)
--------------------------------
- The engine sends a messages to the AIs
  - For example, the in-play update. Gets sent to both AIs.
  - We have a general callback for each player's messages. (In the Team object?)
  - All responses are JSON. We end the game on invalid JSON.
  - The callback looks for the "event" field in the object.
    - Routes the update to a specific handler.
    -

- Maybe have a specific AI object that manages one AI
  - Spawns the process
  - Gets the callbacks
  - Can shut it down.
  - Maybe the Team object "has" an AI?

- QUESTION: How do we get all responses before moving on to the next turn / action?
  - Maybe we have a sort-of "state machine".
  - We want it to seem sequential to the code, even though it is not.
